;;; mb-transient-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from emacs-mb-transient.el

(autoload 'mb-transient "emacs-mb-transient")
(put 'mb-transient 'interactive-only t)
(put 'mb-transient 'function-documentation "\
Search in MusicBrainz")
(put 'mb-transient 'transient--prefix (transient-prefix :command 'mb-transient))
(put 'mb-transient 'transient--layout (list (vector 1 'transient-column (list :description (lambda nil (concat (propertize "Search method" 'face 'transient-heading) " (" (propertize mb-search-method 'face 'font-lock-variable-name-face) ")"))) (list (list 1 'transient-suffix (list :key "si" :description "Indexed" :command 'mb-set-search-method-indexed :transient t)) (list 1 'transient-suffix (list :key "sa" :description (lambda nil (concat "Advanced Query Syntax (fills " (propertize "Query" 'face 'transient-heading) ")")) :command 'mb-advanced-method-setup :transient t)) (list 1 'transient-suffix (list :key "sd" :description "Direct Database Search" :command 'mb-set-search-method-direct :transient t)))) (vector 1 'transient-columns (list :description (lambda nil (concat (propertize "Type" 'face 'transient-heading) " (" (propertize mb-type 'face 'font-lock-variable-name-face) ")")) :pad-keys t) (list (vector 1 'transient-column nil (list (list 1 'transient-suffix (list :key "t C-a" :description "annotation" :command (prog1 'transient:mb-transient:annotation (put 'transient:mb-transient:annotation 'interactive-only t) (put 'transient:mb-transient:annotation 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:annotation (lambda nil (interactive) (mb-set-type "annotation")))) :transient t)) (list 1 'transient-suffix (list :key "tA" :description "area" :command (prog1 'transient:mb-transient:area (put 'transient:mb-transient:area 'interactive-only t) (put 'transient:mb-transient:area 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:area (lambda nil (interactive) (mb-set-type "area")))) :transient t)) (list 1 'transient-suffix (list :key "ta" :description "artist" :command (prog1 'transient:mb-transient:artist (put 'transient:mb-transient:artist 'interactive-only t) (put 'transient:mb-transient:artist 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:artist (lambda nil (interactive) (mb-set-type "artist")))) :transient t)) (list 1 'transient-suffix (list :key "tc" :description "cdstub" :command (prog1 'transient:mb-transient:cdstub (put 'transient:mb-transient:cdstub 'interactive-only t) (put 'transient:mb-transient:cdstub 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:cdstub (lambda nil (interactive) (mb-set-type "cdstub")))) :transient t)) (list 1 'transient-suffix (list :key "td" :description "doc" :command (prog1 'transient:mb-transient:doc (put 'transient:mb-transient:doc 'interactive-only t) (put 'transient:mb-transient:doc 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:doc (lambda nil (interactive) (mb-set-type "doc")))) :transient t)) (list 1 'transient-suffix (list :key "tE" :description "editor" :command (prog1 'transient:mb-transient:editor (put 'transient:mb-transient:editor 'interactive-only t) (put 'transient:mb-transient:editor 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:editor (lambda nil (interactive) (mb-set-type "editor")))) :transient t)) (list 1 'transient-suffix (list :key "te" :description "event" :command (prog1 'transient:mb-transient:event (put 'transient:mb-transient:event 'interactive-only t) (put 'transient:mb-transient:event 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:event (lambda nil (interactive) (mb-set-type "event")))) :transient t)) (list 1 'transient-suffix (list :key "ti" :description "instrument" :command (prog1 'transient:mb-transient:instrument (put 'transient:mb-transient:instrument 'interactive-only t) (put 'transient:mb-transient:instrument 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:instrument (lambda nil (interactive) (mb-set-type "instrument")))) :transient t)))) (vector 1 'transient-column nil (list (list 1 'transient-suffix (list :key "tl" :description "label" :command (prog1 'transient:mb-transient:label (put 'transient:mb-transient:label 'interactive-only t) (put 'transient:mb-transient:label 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:label (lambda nil (interactive) (mb-set-type "label")))) :transient t)) (list 1 'transient-suffix (list :key "tp" :description "place" :command (prog1 'transient:mb-transient:place (put 'transient:mb-transient:place 'interactive-only t) (put 'transient:mb-transient:place 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:place (lambda nil (interactive) (mb-set-type "place")))) :transient t)) (list 1 'transient-suffix (list :key "tR" :description "recording" :command (prog1 'transient:mb-transient:recording (put 'transient:mb-transient:recording 'interactive-only t) (put 'transient:mb-transient:recording 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:recording (lambda nil (interactive) (mb-set-type "recording")))) :transient t)) (list 1 'transient-suffix (list :key "tr" :description "release" :command (prog1 'transient:mb-transient:release (put 'transient:mb-transient:release 'interactive-only t) (put 'transient:mb-transient:release 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:release (lambda nil (interactive) (mb-set-type "release")))) :transient t)) (list 1 'transient-suffix (list :key "tg" :description "release_group" :command (prog1 'transient:mb-transient:release_group (put 'transient:mb-transient:release_group 'interactive-only t) (put 'transient:mb-transient:release_group 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:release_group (lambda nil (interactive) (mb-set-type "release_group")))) :transient t)) (list 1 'transient-suffix (list :key "ts" :description "series" :command (prog1 'transient:mb-transient:series (put 'transient:mb-transient:series 'interactive-only t) (put 'transient:mb-transient:series 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:series (lambda nil (interactive) (mb-set-type "series")))) :transient t)) (list 1 'transient-suffix (list :key "tt" :description "tag" :command (prog1 'transient:mb-transient:tag (put 'transient:mb-transient:tag 'interactive-only t) (put 'transient:mb-transient:tag 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:tag (lambda nil (interactive) (mb-set-type "tag")))) :transient t)) (list 1 'transient-suffix (list :key "tw" :description "work" :command (prog1 'transient:mb-transient:work (put 'transient:mb-transient:work 'interactive-only t) (put 'transient:mb-transient:work 'completion-predicate #'transient--suffix-only) (defalias 'transient:mb-transient:work (lambda nil (interactive) (mb-set-type "work")))) :transient t)))))) (vector 1 'transient-column (list :description (lambda nil (concat (propertize "Query" 'face 'transient-heading) (if mb-query (concat " (" (propertize mb-query 'face 'font-lock-variable-name-face) ")"))))) (list (list 1 'transient-suffix (list :key "<SPC>" :description "Enter query" :command 'mb-set-query :transient t)))) (vector 1 'transient-column (list :description "The rest") (list (list 1 'transient-suffix (list :key "e" :description "Open" :command 'mb-open)) (list 1 'transient-suffix (list :key "q" :description "Quit" :command 'mb-transient-quit))))))
(autoload 'mb-transient-frame "emacs-mb-transient" "\
Wrapper for creating a frame with selected placeholder buffer,
and displaying `mb-transient'." t)
(register-definition-prefixes "emacs-mb-transient" '("mb-"))

;;; End of scraped data

(provide 'mb-transient-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; mb-transient-autoloads.el ends here
